# ДЕСЯТИЧНЫЕ И ДРОБНЫЕ ЧИСЛА

a = 1/3 # Математика с плавающей точкой
b = (2/3) + (1/2)

import decimal 
d = decimal.Decimal('1.141')
c = d + 1

from fractions import Fraction # Дроби: числитель + знаменатель
f = Fraction (2, 3)
e = f + 1
q = f + Fraction (1, 2)

# После создания объекты Fraction можно использовать в математических выраже­ниях

x = f + q
x = f - q
x = f * q
x = f / q

# Объекты Fraction также можно создавать из строк с числами с плавающей точ­кой, что во многом похоже на десятичные объекты
a = Fraction('0.25')
b = Fraction('0.25') + Fraction('1.5')
n = Fraction(6, 12) # Результат автоматически упрощается

# Числовая точность дробных и десятичных типов
s = 1 / 3.0 # Результат точен лишь настолько, # насколько позволяют аппаратные средства
d = 4 / 6.0 # Точность может теряться из-за множества вычислений
# Такая ограниченная точность, присущая математике с плавающей точкой, особен­но заметна для значений, 
# которые не могут быть точно представлены по причине ог­раниченного количества битов в памяти.

# Типы Fraction и Decimal предлагают спо­собы получения точных результатов, хотя ценой снижения скорости вычислений и 
# более многословного кода.

# Преобразование дробей и разнородные типы. Для поддержки преобразования дробей объекты с плавающей точкой теперь име­ют метод, 
# который выдает их числитель и знаменатель, дробные объекты располага­ют методом from float и float 
# принимает в качестве аргумента объект Fraction.
j = 2.6
z = Fraction( *j .as_integer_ratio()) # Преобразует объект с плавающей точкой в дробь: два аргумента
ok = z.limit_denominator (10) # Упростить до ближайшей дроби

l = float(z) # Преобразует дробь в объект с плавающей точкой
lt = float(n + z) # сумма дробей с преобразованием

qw = Fraction.from_float(1.75) # Преобразует объект с плавающей точкой в дробь: другой способ

# в выражениях разрешено смешивать некоторые типы, хотя иногда для предохранения точности требуется 
# преобразовывать в тип Fraction вручную




print(z, ok)