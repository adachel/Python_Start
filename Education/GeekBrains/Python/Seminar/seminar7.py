# print((lambda x: x)(5))

# Задача №47. У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине программы 
# используется множество раз и вы не хотите ничего сломать):

# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))

# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции 'transformation'. 
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, 
# а нужно получить его как есть. Напишите такое лямбда-выражение transformation, чтобы 'transformed_values' 
# получился копией 'values'.

# transformation = lambda x: x
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transformed_values = list(map(transformation, values))

# if values == transformed_values:
#     print('ok')
# else:
#     print('fail')
# print(transformed_values)


# Задача №49. Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, 
# орбита которой имеет самую большую площадь. Напишите функцию find_farthest_orbit(list_of_orbits), 
# которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. Круговые орбиты не учитывайте: 
# вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. 
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. 
# Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. 
# Площадь эллипса вычисляется по формуле S = pi * a * b, где a и b - длины полуосей эллипса. 
# При решении задачи используйте списочные выражения. Подсказка: проще всего будет найти эллипс в два шага: 
# сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь. 
# Гарантируется, что самая далекая планета ровно одна.

# from math import pi
# def find_farthest_orbit(list_of_orbits): # мой вариант, не доделал
#     for i in range(len(list_of_orbits)):
#         s = pi * list_of_orbits[i][0] * list_of_orbits[i][1]
#         print(s)
#     pass

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))

# print(max(list_of_orbits, key=lambda x: (x[0]!=x[1])*(x[0]*x[1]))) # вариант преподавателя



# Вводится список целых чисел в одну строчку через пробел. Необходимо оставить в нем только двузначные числа. 
# Реализовать программу с использованием функции filter. Результат отобразить на экране в виде последовательности 
# оставшихся чисел в одну строчку через пробел. Пример  - 8 11 0 -23 140 1 => 11 -23

from random import randint

arr = [randint(1, 100) for i in range(10)]
print(arr)
arr = list(filter(lambda x: x >= 10 and x < 100, arr)) # мой вариант, не доделал
print(arr)

stringMsg = '-8 11 0 -23 140 1'
print(list(filter(lambda x: 9<(abs(int(x)))<100 , stringMsg.split())))

print(list(filter(lambda x: len(str(abs(int(x)))) == 2 , stringMsg.split())))