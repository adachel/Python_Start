# В Python З.Х существуют три строковых типа: str применяется для текста Unicode (в том числе ASCII), 
# bytes используется для двоичных данных (вклю­чая закодированный текст), 
# a bytearray является изменяемым вариантом типа bytes. Файлы работают в двух режимах: 
# текстовом, который представляет со­держимое как тип str и реализует кодировки Unicode, и двоичном, 
# который имеет дело с низкоуровневым типом bytes и не выполняет какую-либо трансля­цию данных.

# Основы строк
# строки Python относятся к категории неизменяемых последовательнос­тей, а это означает, 
# что содержащиеся в них символы имеют позиционный порядок слева направо и не могут быть модифицированы на месте.

Распространенные строковые литералы и операции:
Операция                                    Описание
S = ' '                                     Пустая строка
S = "spam's"                                Двойные кавычки; то же самое, что и одинарные
S = 's\np\ta\x00m'                          Управляющие последовательности
S = """ ...много строк..."""                Блочные строки в утроенных кавычках
S = г'\temp\spam'                           Неформатированные строки (без управляющих символов)
В = b'sp\xc4m'                              Байтовые строки в Python 2.6, 2.7 и З.Х (см. главы 4 и 37)
U = u'sp\u00c4m'                            Строки Unicode в Python 2.Х и 3.3+ (см. главы 4 и 37)
S1 + S2                                     Конкатенация, 
S * 3                                       Повторение
S[i]                                        Индекс
S[i:j]                                      Cрез
len(S)                                      Длина
"a %s parrot" % kind                        Выражение форматирования строки
"a {0} parrot". format(kind)S.find('pa')    Метод форматирования строки в Python 2.6, 2.7 и З.Х

S.find('ра')                                Строковые методы (всего их 43): поиск
S.rstrip()                                  Удаление пробельных символов
S.replace('pa', 'хх')                       3амена
S.split(',’)                                Разбиение по разделителю
S.isdigit()                                 Проверка содержимого
S.lower()                                   Преобразование регистра символов
S.endswith('spam')                          Проверка конца
'spam'.join(strlist)                        Oбъединение с разделителем
S.encode('latin-1’)                         Kодирование Unicode
B.decode(’utf8’)                            Декодирование Unicode и т.д. (табл. 7.3)

for x in S: print(x)                        Итерация, членство
'spam' in S
[c * 2 for c in S]
map(ord, S)

re.match('sp(. *)am', line)                 Сопоставление с образцом: библиотечный модуль

Строковые литералы
• одинарные кавычки — 'spa"m'; 
• двойные кавычки — "spa'm";
• утроенные кавычки '''...spam...''', """...spam...""" 
• управляющие последовательности — "s\tp\na\0m";
• неформатированные строки — г "С:\new\test.spm";
• байтовые литералы в Python З.Х и 2.6+ (см. главы 4 и 37) — b'sp\x01am'; 
• литералы Unicode в Python 2.Х и 3.3+ (см. главы 4 и 37) — u'eggs\и0020spam'.

Строки в одинарных и двойных кавычках являются одинаковыми
    Обратите внимание, что запятая здесь важна. Без нее Python выполняет автомати­ческую конкатенацию соседних 
строк в любом выражении.
    Добавление запятых между этими строками привело бы в результате к созданию кортежа, а не строки.

Управляющие последовательности представляют специальные символы
    Oбратная косаячерта используется для введения специальных кодировок символов, 
известных как управляющие последовательности.
s = 'a\nb\tc'
    Два символа \п обозначают одиночный символ — двоичное значение символа но­вой строки в таблице символов 
(код символа 10 в ASCII). Подобным образом последо­вательность \t заменяется символом табуляции.

Символы, представляемые в строке посредством обратной косой черты
Управляющая последовательность                          Описание
\новая строка                                           Игнорируется (строка продолжения)
\\                                                      Обратная косая черта (сохраняет один символ \)
\'                                                      Одинарная кавычка (сохраняет ')
\"                                                      Двойная кавычка (сохраняет ")
\а                                                      Звонок
\ь                                                      Забой
\f                                                      Перевод страницы
\п                                                      Новая строка (перевод строки)
\г                                                      Возврат каретки
\t                                                      Горизонтальная табуляция
\v                                                      Вертикальная табуляция
\xhh                                                    Символ с шестнадцатеричным значением hh (точно 2 цифры)
\ооо                                                    Символ с восьмеричным значением ооо (до 3 цифр)
\0                                                      Пустой: двоичный символ 0 (не конец строки)
\N{идентификатор}                                       Идентификатор базы данных Unicode
\uhhhh                                                  Символ Unicode с 16-битным шестнадцатеричным значением
\Uhhhhhhh                                               Символ Unicode с 32-битным шестнадцатеричным значением
\остальное                                              Не управляющая последовательность (сохраняет \ и остальное)

если Python не распознает символ после \ в качестве допустимого управляющего кода, то он просто оставляет
обратную косую черту в результирующей строке:
х = "C:\py\code"        # Сохраняет \ буквально (и отображает как \ \)
'С:\\py\\code' 
1еп(х) = 10

Неформатированные строки подавляют управляющие последовательности
Утроенные кавычки представляют многострочные блочные строки

Инструменты преобразования строк
    Функция 'repr' также преобразует объект в его строковое представ­ление,  
но возвращает объект в виде строки кода, которую можно выполнить, чтобы воссоздать объект.

Изменение строк, часть I
S = S + 'SPAM!' # Чтобы изменить строку, нужно создать новую

    Python сначала извлечет метод из объекта и затем вы­зовет его, передавая объект и аргументы. 
Или простыми словами выражение вызова метода означает следующее:
    Вызвать метод для обработки объекта с аргументами.

Тип bytearray поддерживает изменения текста на месте, но только для простых 8-битных типов.

    Если после внесения изменений список необходимо преобразовать обратно в стро­ку (скажем, для записи в файл), 
тогда понадобится вызвать метод join:
S = ' ' . join (L)

Выражения форматирования строк
Выражение форматирования строк: '... %s ...' % (значения)
Вызов метода форматирования строк: '... {} ...'.format (значения)

    В Python определена бинарная операция % для работы со строками. Когда операция % применяется к строкам, 
она предоставля­ет простую методику форматирования значений в виде строк согласно определению формата. 
Вкратце операция % предлагает компактный способ записи для множества подстановок строк 
одновременно вместо создания и конкатенации отдельных частей.
    Чтобы сформатировать строку, выполните следующие действия.
    1. Слева от операции % укажите строку формата, содержащую одну или более встро­енных целей преобразования, 
каждая из которых начинается с % (например, %d).
    2. Справа от операции % укажите объект (или объекты, внедренные в кортеж), ко­торый необходимо вставить 
в строку формата слева на месте цели (или целей) преобразования.

'That is %d %s bird!' % (1, 'dead')  # Выражение формата
Результат: That is 1 dead bird!

Расширенный синтаксис выражений форматирования
    Для более сложного форматирования, специфичного для типов, в выражени­ях форматирования можно использовать 
любые коды преобразования типов, пе­речисленные в табл.; они указываются после символа % в целях подстановки.
Коды типов в форматировании строк
Код             Описание
s               Строка (или строка str (X) любого объекта)
r               То же, что и s, но применяется герг, а не str
с               Символ (int или str)
d               Десятичное число (целоечисло с основанием 10)
i               Целое число
n               То же, что и d (устарел: больше не является беззнаковым)
о               Восьмеричное целое число (с основанием 8)
х               Шестнадцатеричное целое число (с основанием 16)
X               То же, что и х, но в верхнем регистре
е               Число с плавающей точкой со степенью, в нижнем регистре
Е               То же, что и е, но в верхнем регистре
f               Десятичное число с плавающей точкой
F               То же, что и f, но в верхнем регистре
g               Число с плавающей точкой е или f 
G               Число с плавающей точкой Е или F 
%               Литерал % (записывается как %%)

Общая структура целей преобразований выглядит следующим образом:
            % [ (имя ключа) ] [флаги] [ширина] [. точность] код типа
    
    Между % и символом кода типа можно делать любое из описанных ниже действий:
    • указывать имя ключа для индексации словаря, используемого в правой части вы­ражения;
    • перечислять флаги, которые указывают аспекты вроде выравнивания влево (-), знак числа (+), 
пусто перед положительными числами и — для отрицательных чисел (пробел) и дополнение нулями (0);
    • задавать общую минимальную ширину поля для подставляемого текста;
    • устанавливать количество цифр, отображаемых после десятичной точки (точность), для чисел с плавающей точкой.

    Части ширина и точность также можно записывать как * для указания на то, что они должны брать свои значения 
из следующего элемента во входных значениях пра­вой части выражения (удобно, когда это не известно вплоть до времени выполнения).
И если вам не нужны любые дополнительные инструменты, тогда простой код %s в строке формата будет заменяться стандартной 
отображаемой строкой соответствую­щего значения независимо от его типа.

    Форматы %e, %f и %g отображают числа с плавающей точкой по-разному.

Bстроенная функция "vars", возвращающaя словарь, который содержит все переменные, существующие в месте ее вызова:
food = 'spam'
qty = 10
vars ()
{'food': 'spam', 'qty': 10, ... плюс встроенные имена, установленные Python,.. }

Основы методов форматирования
template = '{0}, {1} and {2}' # По позициям
template.format('spam', 'ham', 'eggs')
>>> 'spam, ham and eggs'
template = '{motto}, {pork} and {food}' # По ключевым словам
template.format(motto = 'spam', pork = 'ham', food = 'eggs')
>>> 'spam, ham and eggs'
template = '{motto}, {0} and {food}' # По позициям и ключевым словам
template.format('ham', motto = 'spam', food = 'eggs')
>>> 'spam, ham and eggs'
template = '{}, {} and {}' # По относительным позициям
template.format('spam', 'ham', 'eggs') # Нововведение Python 3.1 и 2.7
>>> 'spam, ham and eggs'

template = '%s, %s and %s' # To же самое посредством выражения
template % ('spam', 'ham', ’eggs')
>>> 'spam, ham and eggs’
template = '%(motto) s, %(pork) s and %(food) s' 
template % dict(motto = 'spam', pork = 'ham', food = 'eggs')
>>> 'spam, ham and eggs'

Добавление ключей, атрибутов и смещений
import sys
'Му {l[kind]} runs {0.platform}'.format.sys, {'kind': 'laptop'}
>>> 'My laptop runs Win32'
"My {map [kind]} runs {sys.platform}' .format(sys=sys, map = {'kind': 'laptop'})
>>> 'My laptop runs Win32'

Расширенный синтаксис методов форматирования
    Формальная структура того, что может встречаться в качестве цели подстановки в строке формата — все ее четыре части
необязательны и должны задаваться без промежуточных пробелов:

    {имя__поля компонент ! флаг_преобразования : спецификатор_формата}

Oписание синтаксиса цели подстановки:
• имя_поля — необязательное число или ключевое слово, идентифицирующее ар­гумент, которое может быть опущено 
для применения относительной нумера­ции аргументов
• компонент — строка из нуля или большего числа ссылок 'имя', либо [индекс], используемых для извлечения атрибутов 
и индексированных значений аргумен­та, которая может быть опущена для применения всего значения аргумента.
• флаг_преобразования - если присутствует, начинается с символа '!', за которым следует 'r', s или 'а' для вызова на значении 
встроенных функций 'rерr', 'str' или 'ascii' соответственно.
• спецификатор_формата - если присутствует, начинается с символа ':', за которым следует текст, указывающий, 
каким образом значение должно быть представле­но, в том числе такие детали, как ширина поля, выравнивание, дополнение, 
де­сятичная точность и т.д., и в конце необязательный код типа данных.
Часть 'спецификатор-формата' после символа двоеточия имеет собственный рас­ширенный формат и формально описывается так 
(квадратные скобки обозначают не­обязательные компоненты и записываться буквально не должны):
    
    [[заполнение] выравнивание] [знак] [#] [0] [ширина] [,] [.точность] [код_типа]
    
    3аполнение - может быть любым заполняющим символом кроме { или }; 
    Bыравнивание — '<', '>', '=' или '^' соответственно для выравнивания влево, выравнивания вправо, дополнения символом знака 
или выравнивания по центру;
    3нак может быть '+' , '-' или 'пробелом'; а вариант, 'запятая' требует запятой для разделителя тысяч.
    Ширина и Точность почти такие же, как в выражении '%'; кроме того, 'спецификатор__формата' может также содержать вложен­ные 
строки формата {} только с именами полей, чтобы получать значения из списка аргументов динамически 
(что очень похоже на '*' в выражениях форматирования).
    Kод_типа - метода практически полностью совпадают с параметрами, которые используются в выражениях '%'
и были ранее перечислены в табл., но метод форматирования разрешает также применять код типа 'b' для отоб­ражения целых чисел 
в двоичном виде (эквивалентен использованию встроеннойфункции 'bin'), код типа '%' для отображения знака процента 
и только 'd' для десятичных целых ('i' либо 'u' не применяются).

