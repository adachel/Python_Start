Распространенные списковые литералы и операции
Операция                                    Описание
L = []                                      Пустой список
L = [123, ’abc’, 1.23, {}]                  Четыре элемента: индексы 0..3
L = [’Bob’, 40.0, [’dev’, ’mgr']]           Вложенные подсписки
L = list(’spam’) L = list(range(-4, 4))     Список элементов итерируемого объекта, список последовательных целых чисел
L[i]
L[i] [j]
L[i:j]
len(L)                                      Индекс, индекс индекса, срез, длина
LI + L2
L * 3                                       Конкатенация, повторение

for х in L: print (х)                       Итерация,членство
                                     
L. append(4)                                Методы: увеличение
L.extend([5,6,7] )
L.insert(i, X)

L.index(X)                                  Методы: поиск
L.count(X)

L.sort()                                    сортировка 
L.reverse()                                 обращение
L.copy()                                    копирование
L.clear()                                   очистка

L.pop(i)                                    Методы, операторы: уменьшение
L. remove (X)
del L[i]
del L[i:j]
L[i:j] = []

L[i] = 3                                    Присваивание по индексу, присваивание по срезу
L[i:j] = [4,5,6]

L = [x**2 for x in range (5)]               Списковые включения и отображения
list(map(ord, 'spam’))

    Удаление - Секция, указанная слева от знака = удаляется.
    Вставка. Новые элементы, содержащиеся в итерируемом объекте справа от зна­ка = вставляются в список слева в месте, 
где была удалена старая секция
L = [1, 2, 3]
L[1:2] = [4, 5] # Замена/вставка

    append - который просто прикрепляет одиночный элемент (ссылку на объект) в конец списка. 
В отли­чие от конкатенации append ожидает, что ему будет передан одиночный объект, а не список.

    В методе 'sort' аргумент reverse позволяет делать сортировку в убывающем порядке вместо возрастающего, 
a 'key' задает функцию с одним аргументом, которая возвращает значение, подлежащее использованию 
при сортировке — стандартный преобразователь регистра символов 'lower' строкового объекта в следующем примере 
(хотя более новый пре­образователь 'casefold' мог бы лучше обрабатывать некоторые типы текста Unicode):

    Одно предостережение: помните о том, что 'append' и 'sort' изменяют ассоцииро­ванный списковый объект на месте, 
но не возвращают список в качестве результата (формально оба метода возвращают значение None).
Если вы запишете что-то вроде L = L.append(X), то не получите модифицированное значение 'L'
(на самом деле вывообще утратите ссылку на список!).

'reverse' - меняет порядок следования элементов в списке на противоположный (обращает список) на месте.
'extend' - вставляет множество элементов в конец списка
'pop' - удаляет элемент из кон­ца списка
'reversed' - которая работает подоб­но 'sorted' и возвращает новый результирующий объект, но должнабыть помещена 
внутрь вызова 'list', т.к. ее результат является итератором, который выпускает результаты по требованию.

'remove' - удаляют элемент по значению 
'insert' - вставляют элемент по смещению
'count' - подсчитывают количество вхождений и находят сме­щение элемента

'del' - для удаления элемента или секции на месте:


